package io.github.dsheirer.source.tuner.sdrplay.api;

import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
import io.github.dsheirer.source.tuner.sdrplay.api.SDRPlayAPILibrary.sdrplay_api_DevParamsT;
import io.github.dsheirer.source.tuner.sdrplay.api.SDRPlayAPILibrary.sdrplay_api_RxChannelParamsT;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class sdrplay_api_DeviceParamsT extends Structure {
	/** C type : sdrplay_api_DevParamsT* */
	public sdrplay_api_DevParamsT devParams;
	/** C type : sdrplay_api_RxChannelParamsT* */
	public sdrplay_api_RxChannelParamsT rxChannelA;
	/** C type : sdrplay_api_RxChannelParamsT* */
	public sdrplay_api_RxChannelParamsT rxChannelB;
	public sdrplay_api_DeviceParamsT() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("devParams", "rxChannelA", "rxChannelB");
	}
	/**
	 * @param devParams C type : sdrplay_api_DevParamsT*<br>
	 * @param rxChannelA C type : sdrplay_api_RxChannelParamsT*<br>
	 * @param rxChannelB C type : sdrplay_api_RxChannelParamsT*
	 */
	public sdrplay_api_DeviceParamsT(sdrplay_api_DevParamsT devParams, sdrplay_api_RxChannelParamsT rxChannelA, sdrplay_api_RxChannelParamsT rxChannelB) {
		super();
		this.devParams = devParams;
		this.rxChannelA = rxChannelA;
		this.rxChannelB = rxChannelB;
	}
	public static class ByReference extends sdrplay_api_DeviceParamsT implements Structure.ByReference {
		
	};
	public static class ByValue extends sdrplay_api_DeviceParamsT implements Structure.ByValue {
		
	};
}
