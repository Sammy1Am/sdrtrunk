package io.github.dsheirer.source.tuner.sdrplay.api;
import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.DoubleByReference;
import com.sun.jna.ptr.FloatByReference;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.PointerByReference;
import java.nio.DoubleBuffer;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;
import io.github.dsheirer.source.tuner.sdrplay.api.sdrplay_api_DeviceParamsT.ByReference;
/**
 * JNA Wrapper for library <b>SDRPlayAPI</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface SDRPlayAPILibrary extends Library {
	public static final String JNA_LIBRARY_NAME = "sdrplay_api";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(SDRPlayAPILibrary.JNA_LIBRARY_NAME);
	public static final SDRPlayAPILibrary INSTANCE = (SDRPlayAPILibrary)Native.loadLibrary(SDRPlayAPILibrary.JNA_LIBRARY_NAME, SDRPlayAPILibrary.class);
	/** enum values */
	public static interface sdrplay_api_ErrT {
		/** <i>native declaration : line 40</i> */
		public static final int sdrplay_api_Success = 0;
		/** <i>native declaration : line 41</i> */
		public static final int sdrplay_api_Fail = 1;
		/** <i>native declaration : line 42</i> */
		public static final int sdrplay_api_InvalidParam = 2;
		/** <i>native declaration : line 43</i> */
		public static final int sdrplay_api_OutOfRange = 3;
		/** <i>native declaration : line 44</i> */
		public static final int sdrplay_api_GainUpdateError = 4;
		/** <i>native declaration : line 45</i> */
		public static final int sdrplay_api_RfUpdateError = 5;
		/** <i>native declaration : line 46</i> */
		public static final int sdrplay_api_FsUpdateError = 6;
		/** <i>native declaration : line 47</i> */
		public static final int sdrplay_api_HwError = 7;
		/** <i>native declaration : line 48</i> */
		public static final int sdrplay_api_AliasingError = 8;
		/** <i>native declaration : line 49</i> */
		public static final int sdrplay_api_AlreadyInitialised = 9;
		/** <i>native declaration : line 50</i> */
		public static final int sdrplay_api_NotInitialised = 10;
		/** <i>native declaration : line 51</i> */
		public static final int sdrplay_api_NotEnabled = 11;
		/** <i>native declaration : line 52</i> */
		public static final int sdrplay_api_HwVerError = 12;
		/** <i>native declaration : line 53</i> */
		public static final int sdrplay_api_OutOfMemError = 13;
		/** <i>native declaration : line 54</i> */
		public static final int sdrplay_api_ServiceNotResponding = 14;
		/** <i>native declaration : line 55</i> */
		public static final int sdrplay_api_StartPending = 15;
		/** <i>native declaration : line 56</i> */
		public static final int sdrplay_api_StopPending = 16;
		/** <i>native declaration : line 57</i> */
		public static final int sdrplay_api_InvalidMode = 17;
		/** <i>native declaration : line 58</i> */
		public static final int sdrplay_api_FailedVerification1 = 18;
		/** <i>native declaration : line 59</i> */
		public static final int sdrplay_api_FailedVerification2 = 19;
		/** <i>native declaration : line 60</i> */
		public static final int sdrplay_api_FailedVerification3 = 20;
		/** <i>native declaration : line 61</i> */
		public static final int sdrplay_api_FailedVerification4 = 21;
		/** <i>native declaration : line 62</i> */
		public static final int sdrplay_api_FailedVerification5 = 22;
		/** <i>native declaration : line 63</i> */
		public static final int sdrplay_api_FailedVerification6 = 23;
		/** <i>native declaration : line 64</i> */
		public static final int sdrplay_api_InvalidServiceVersion = 24;
	};
	/** enum values */
	public static interface sdrplay_api_ReasonForUpdateT {
		/** <i>native declaration : line 69</i> */
		public static final int sdrplay_api_Update_None = 0x00000000;
		/**
		 * Reasons for master only mode<br>
		 * <i>native declaration : line 72</i>
		 */
		public static final int sdrplay_api_Update_Dev_Fs = 0x00000001;
		/** <i>native declaration : line 73</i> */
		public static final int sdrplay_api_Update_Dev_Ppm = 0x00000002;
		/** <i>native declaration : line 74</i> */
		public static final int sdrplay_api_Update_Dev_SyncUpdate = 0x00000004;
		/** <i>native declaration : line 75</i> */
		public static final int sdrplay_api_Update_Dev_ResetFlags = 0x00000008;
		/** <i>native declaration : line 77</i> */
		public static final int sdrplay_api_Update_Rsp1a_BiasTControl = 0x00000010;
		/** <i>native declaration : line 78</i> */
		public static final int sdrplay_api_Update_Rsp1a_RfNotchControl = 0x00000020;
		/** <i>native declaration : line 79</i> */
		public static final int sdrplay_api_Update_Rsp1a_RfDabNotchControl = 0x00000040;
		/** <i>native declaration : line 81</i> */
		public static final int sdrplay_api_Update_Rsp2_BiasTControl = 0x00000080;
		/** <i>native declaration : line 82</i> */
		public static final int sdrplay_api_Update_Rsp2_AmPortSelect = 0x00000100;
		/** <i>native declaration : line 83</i> */
		public static final int sdrplay_api_Update_Rsp2_AntennaControl = 0x00000200;
		/** <i>native declaration : line 84</i> */
		public static final int sdrplay_api_Update_Rsp2_RfNotchControl = 0x00000400;
		/** <i>native declaration : line 85</i> */
		public static final int sdrplay_api_Update_Rsp2_ExtRefControl = 0x00000800;
		/** <i>native declaration : line 87</i> */
		public static final int sdrplay_api_Update_RspDuo_ExtRefControl = 0x00001000;
		/** <i>native declaration : line 89</i> */
		public static final int sdrplay_api_Update_Master_Spare_1 = 0x00002000;
		/** <i>native declaration : line 90</i> */
		public static final int sdrplay_api_Update_Master_Spare_2 = 0x00004000;
		/**
		 * Note: sdrplay_api_Update_Tuner_Gr MUST be the first value defined in this section!<br>
		 * <i>native declaration : line 94</i>
		 */
		public static final int sdrplay_api_Update_Tuner_Gr = 0x00008000;
		/** <i>native declaration : line 95</i> */
		public static final int sdrplay_api_Update_Tuner_GrLimits = 0x00010000;
		/** <i>native declaration : line 96</i> */
		public static final int sdrplay_api_Update_Tuner_Frf = 0x00020000;
		/** <i>native declaration : line 97</i> */
		public static final int sdrplay_api_Update_Tuner_BwType = 0x00040000;
		/** <i>native declaration : line 98</i> */
		public static final int sdrplay_api_Update_Tuner_IfType = 0x00080000;
		/** <i>native declaration : line 99</i> */
		public static final int sdrplay_api_Update_Tuner_DcOffset = 0x00100000;
		/** <i>native declaration : line 100</i> */
		public static final int sdrplay_api_Update_Tuner_LoMode = 0x00200000;
		/** <i>native declaration : line 102</i> */
		public static final int sdrplay_api_Update_Ctrl_DCoffsetIQimbalance = 0x00400000;
		/** <i>native declaration : line 103</i> */
		public static final int sdrplay_api_Update_Ctrl_Decimation = 0x00800000;
		/** <i>native declaration : line 104</i> */
		public static final int sdrplay_api_Update_Ctrl_Agc = 0x01000000;
		/** <i>native declaration : line 105</i> */
		public static final int sdrplay_api_Update_Ctrl_AdsbMode = 0x02000000;
		/** <i>native declaration : line 106</i> */
		public static final int sdrplay_api_Update_Ctrl_OverloadMsgAck = 0x04000000;
		/** <i>native declaration : line 108</i> */
		public static final int sdrplay_api_Update_RspDuo_BiasTControl = 0x08000000;
		/** <i>native declaration : line 109</i> */
		public static final int sdrplay_api_Update_RspDuo_AmPortSelect = 0x10000000;
		/** <i>native declaration : line 110</i> */
		public static final int sdrplay_api_Update_RspDuo_Tuner1AmNotchControl = 0x20000000;
		/** <i>native declaration : line 111</i> */
		public static final int sdrplay_api_Update_RspDuo_RfNotchControl = 0x40000000;
		/** <i>native declaration : line 112</i> */
		public static final int sdrplay_api_Update_RspDuo_RfDabNotchControl = 0x80000000;
	};
	/** enum values */
	public static interface sdrplay_api_ReasonForUpdateExtension1T {
		/** <i>native declaration : line 117</i> */
		public static final int sdrplay_api_Update_Ext1_None = 0x00000000;
		/**
		 * Reasons for master only mode<br>
		 * <i>native declaration : line 120</i>
		 */
		public static final int sdrplay_api_Update_RspDx_HdrEnable = 0x00000001;
		/** <i>native declaration : line 121</i> */
		public static final int sdrplay_api_Update_RspDx_BiasTControl = 0x00000002;
		/** <i>native declaration : line 122</i> */
		public static final int sdrplay_api_Update_RspDx_AntennaControl = 0x00000004;
		/** <i>native declaration : line 123</i> */
		public static final int sdrplay_api_Update_RspDx_RfNotchControl = 0x00000008;
		/** <i>native declaration : line 124</i> */
		public static final int sdrplay_api_Update_RspDx_RfDabNotchControl = 0x00000010;
		/** <i>native declaration : line 125</i> */
		public static final int sdrplay_api_Update_RspDx_HdrBw = 0x00000020;
	};
	/** enum values */
	public static interface sdrplay_api_DbgLvl_t {
		/** <i>native declaration : line 132</i> */
		public static final int sdrplay_api_DbgLvl_Disable = 0;
		/** <i>native declaration : line 133</i> */
		public static final int sdrplay_api_DbgLvl_Verbose = 1;
		/** <i>native declaration : line 134</i> */
		public static final int sdrplay_api_DbgLvl_Warning = 2;
		/** <i>native declaration : line 135</i> */
		public static final int sdrplay_api_DbgLvl_Error = 3;
		/** <i>native declaration : line 136</i> */
		public static final int sdrplay_api_DbgLvl_Message = 4;
	};
	public static final int SDRPLAY_RSP1A_ID = (int)(255);
	public static final int SDRPLAY_RSP2_ID = (int)(2);
	public static final float SDRPLAY_API_VERSION = (float)(3.07);
	public static final int SDRPLAY_RSPdx_ID = (int)(4);
	public static final int SDRPLAY_RSPduo_ID = (int)(3);
	public static final int SDRPLAY_MAX_SER_NO_LEN = (int)(64);
	public static final int SDRPLAY_MAX_TUNERS_PER_DEVICE = (int)(2);
	public static final int SDRPLAY_RSP1_ID = (int)(1);
	public static final int SDRPLAY_MAX_DEVICES = (int)(16);
	public static final int SDRPLAY_MAX_ROOT_NM_LEN = (int)(32);
	public interface sdrplay_api_Open_t extends Callback {
		int apply();
	};
	public interface sdrplay_api_Close_t extends Callback {
		int apply();
	};
	public interface sdrplay_api_ApiVersion_t extends Callback {
		int apply(FloatByReference apiVer);
	};
	public interface sdrplay_api_LockDeviceApi_t extends Callback {
		int apply();
	};
	public interface sdrplay_api_UnlockDeviceApi_t extends Callback {
		int apply();
	};
	public interface sdrplay_api_GetDevices_t extends Callback {
		int apply(sdrplay_api_DeviceT devices, IntByReference numDevs, int maxDevs);
	};
	public interface sdrplay_api_SelectDevice_t extends Callback {
		int apply(sdrplay_api_DeviceT device);
	};
	public interface sdrplay_api_ReleaseDevice_t extends Callback {
		int apply(sdrplay_api_DeviceT device);
	};
	public interface sdrplay_api_GetErrorString_t extends Callback {
		Pointer apply(int err);
	};
	public interface sdrplay_api_GetLastError_t extends Callback {
		sdrplay_api_ErrorInfoT apply(sdrplay_api_DeviceT device);
	};
	public interface sdrplay_api_DisableHeartbeat_t extends Callback {
		int apply();
	};
	public interface sdrplay_api_DebugEnable_t extends Callback {
		int apply(SDRPlayAPILibrary.HANDLE dev, int dbgLvl);
	};
	public interface sdrplay_api_GetDeviceParams_t extends Callback {
		int apply(SDRPlayAPILibrary.HANDLE dev, PointerByReference deviceParams);
	};
	public interface sdrplay_api_Init_t extends Callback {
		int apply(SDRPlayAPILibrary.HANDLE dev, SDRPlayAPILibrary.sdrplay_api_CallbackFnsT callbackFns, Pointer cbContext);
	};
	public interface sdrplay_api_Uninit_t extends Callback {
		int apply(SDRPlayAPILibrary.HANDLE dev);
	};
	public interface sdrplay_api_Update_t extends Callback {
		int apply(SDRPlayAPILibrary.HANDLE dev, SDRPlayAPILibrary.sdrplay_api_TunerSelectT tuner, int reasonForUpdate, int reasonForUpdateExt1);
	};
	public interface sdrplay_api_SwapRspDuoActiveTuner_t extends Callback {
		int apply(SDRPlayAPILibrary.HANDLE dev, SDRPlayAPILibrary.sdrplay_api_TunerSelectT tuner, SDRPlayAPILibrary.sdrplay_api_RspDuo_AmPortSelectT tuner1AmPortSel);
	};
	public interface sdrplay_api_SwapRspDuoDualTunerModeSampleRate_t extends Callback {
		int apply(DoubleByReference currentSampleRate);
	};
	public interface sdrplay_api_SwapRspDuoMode_t extends Callback {
		int apply(sdrplay_api_DeviceT currDevice, PointerByReference deviceParams, SDRPlayAPILibrary.sdrplay_api_RspDuoModeT rspDuoMode, double sampleRate, SDRPlayAPILibrary.sdrplay_api_TunerSelectT tuner, SDRPlayAPILibrary.sdrplay_api_Bw_MHzT bwType, SDRPlayAPILibrary.sdrplay_api_If_kHzT ifType, SDRPlayAPILibrary.sdrplay_api_RspDuo_AmPortSelectT tuner1AmPortSel);
	};
	/**
	 * Original signature : <code>sdrplay_api_ErrT sdrplay_api_Open()</code><br>
	 * <i>native declaration : line 199</i>
	 */
	int sdrplay_api_Open();
	/**
	 * Original signature : <code>sdrplay_api_ErrT sdrplay_api_Close()</code><br>
	 * <i>native declaration : line 200</i>
	 */
	int sdrplay_api_Close();
	/**
	 * Original signature : <code>sdrplay_api_ErrT sdrplay_api_ApiVersion(float*)</code><br>
	 * <i>native declaration : line 201</i><br>
	 * @deprecated use the safer methods {@link #sdrplay_api_ApiVersion(java.nio.FloatBuffer)} and {@link #sdrplay_api_ApiVersion(com.sun.jna.ptr.FloatByReference)} instead
	 */
	@Deprecated 
	int sdrplay_api_ApiVersion(FloatByReference apiVer);
	/**
	 * Original signature : <code>sdrplay_api_ErrT sdrplay_api_ApiVersion(float*)</code><br>
	 * <i>native declaration : line 201</i>
	 */
	int sdrplay_api_ApiVersion(FloatBuffer apiVer);
	/**
	 * Original signature : <code>sdrplay_api_ErrT sdrplay_api_LockDeviceApi()</code><br>
	 * <i>native declaration : line 202</i>
	 */
	int sdrplay_api_LockDeviceApi();
	/**
	 * Original signature : <code>sdrplay_api_ErrT sdrplay_api_UnlockDeviceApi()</code><br>
	 * <i>native declaration : line 203</i>
	 */
	int sdrplay_api_UnlockDeviceApi();
	/**
	 * Original signature : <code>sdrplay_api_ErrT sdrplay_api_GetDevices(sdrplay_api_DeviceT*, unsigned int*, unsigned int)</code><br>
	 * <i>native declaration : line 204</i><br>
	 * @deprecated use the safer methods {@link #sdrplay_api_GetDevices(sdrplayapi.sdrplay_api_DeviceT, java.nio.IntBuffer, int)} and {@link #sdrplay_api_GetDevices(sdrplayapi.sdrplay_api_DeviceT, com.sun.jna.ptr.IntByReference, int)} instead
	 */
	@Deprecated 
	int sdrplay_api_GetDevices(sdrplay_api_DeviceT devices, IntByReference numDevs, int maxDevs);
	/**
	 * Original signature : <code>sdrplay_api_ErrT sdrplay_api_GetDevices(sdrplay_api_DeviceT*, unsigned int*, unsigned int)</code><br>
	 * <i>native declaration : line 204</i>
	 */
	int sdrplay_api_GetDevices(sdrplay_api_DeviceT devices, IntBuffer numDevs, int maxDevs);
	/**
	 * Original signature : <code>sdrplay_api_ErrT sdrplay_api_SelectDevice(sdrplay_api_DeviceT*)</code><br>
	 * <i>native declaration : line 205</i>
	 */
	int sdrplay_api_SelectDevice(sdrplay_api_DeviceT device);
	/**
	 * Original signature : <code>sdrplay_api_ErrT sdrplay_api_ReleaseDevice(sdrplay_api_DeviceT*)</code><br>
	 * <i>native declaration : line 206</i>
	 */
	int sdrplay_api_ReleaseDevice(sdrplay_api_DeviceT device);
	/**
	 * Original signature : <code>char* sdrplay_api_GetErrorString(sdrplay_api_ErrT)</code><br>
	 * <i>native declaration : line 207</i>
	 */
	Pointer sdrplay_api_GetErrorString(int err);
	/**
	 * Original signature : <code>sdrplay_api_ErrorInfoT* sdrplay_api_GetLastError(sdrplay_api_DeviceT*)</code><br>
	 * <i>native declaration : line 208</i>
	 */
	sdrplay_api_ErrorInfoT sdrplay_api_GetLastError(sdrplay_api_DeviceT device);
	/**
	 * Must be called before sdrplay_api_SelectDevice()<br>
	 * Original signature : <code>sdrplay_api_ErrT sdrplay_api_DisableHeartbeat()</code><br>
	 * <i>native declaration : line 209</i>
	 */
	int sdrplay_api_DisableHeartbeat();
	/**
	 * Original signature : <code>sdrplay_api_ErrT sdrplay_api_DebugEnable(HANDLE, sdrplay_api_DbgLvl_t)</code><br>
	 * <i>native declaration : line 212</i>
	 */
	int sdrplay_api_DebugEnable(SDRPlayAPILibrary.HANDLE dev, int enable);
	/**
	 * Original signature : <code>sdrplay_api_ErrT sdrplay_api_GetDeviceParams(HANDLE, sdrplay_api_DeviceParamsT**)</code><br>
	 * <i>native declaration : line 213</i><br>
	 * @deprecated use the safer method {@link #sdrplay_api_GetDeviceParams(sdrplayapi.SDRPlayAPILibrary.HANDLE, sdrplayapi.sdrplay_api_DeviceParamsT.ByReference[])} instead
	 */
	@Deprecated 
	int sdrplay_api_GetDeviceParams(SDRPlayAPILibrary.HANDLE dev, PointerByReference deviceParams);
	/**
	 * Original signature : <code>sdrplay_api_ErrT sdrplay_api_GetDeviceParams(HANDLE, sdrplay_api_DeviceParamsT**)</code><br>
	 * <i>native declaration : line 213</i>
	 */
	int sdrplay_api_GetDeviceParams(SDRPlayAPILibrary.HANDLE dev, ByReference deviceParams[]);
	/**
	 * Original signature : <code>sdrplay_api_ErrT sdrplay_api_Init(HANDLE, sdrplay_api_CallbackFnsT*, void*)</code><br>
	 * <i>native declaration : line 214</i>
	 */
	int sdrplay_api_Init(SDRPlayAPILibrary.HANDLE dev, SDRPlayAPILibrary.sdrplay_api_CallbackFnsT callbackFns, Pointer cbContext);
	/**
	 * Original signature : <code>sdrplay_api_ErrT sdrplay_api_Uninit(HANDLE)</code><br>
	 * <i>native declaration : line 215</i>
	 */
	int sdrplay_api_Uninit(SDRPlayAPILibrary.HANDLE dev);
	/**
	 * Original signature : <code>sdrplay_api_ErrT sdrplay_api_Update(HANDLE, sdrplay_api_TunerSelectT, sdrplay_api_ReasonForUpdateT, sdrplay_api_ReasonForUpdateExtension1T)</code><br>
	 * <i>native declaration : line 216</i>
	 */
	int sdrplay_api_Update(SDRPlayAPILibrary.HANDLE dev, SDRPlayAPILibrary.sdrplay_api_TunerSelectT tuner, int reasonForUpdate, int reasonForUpdateExt1);
	/**
	 * Original signature : <code>sdrplay_api_ErrT sdrplay_api_SwapRspDuoActiveTuner(HANDLE, sdrplay_api_TunerSelectT*, sdrplay_api_RspDuo_AmPortSelectT)</code><br>
	 * <i>native declaration : line 217</i>
	 */
	int sdrplay_api_SwapRspDuoActiveTuner(SDRPlayAPILibrary.HANDLE dev, SDRPlayAPILibrary.sdrplay_api_TunerSelectT currentTuner, SDRPlayAPILibrary.sdrplay_api_RspDuo_AmPortSelectT tuner1AmPortSel);
	/**
	 * Original signature : <code>sdrplay_api_ErrT sdrplay_api_SwapRspDuoDualTunerModeSampleRate(HANDLE, double*)</code><br>
	 * <i>native declaration : line 218</i><br>
	 * @deprecated use the safer methods {@link #sdrplay_api_SwapRspDuoDualTunerModeSampleRate(sdrplayapi.SDRPlayAPILibrary.HANDLE, java.nio.DoubleBuffer)} and {@link #sdrplay_api_SwapRspDuoDualTunerModeSampleRate(sdrplayapi.SDRPlayAPILibrary.HANDLE, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	int sdrplay_api_SwapRspDuoDualTunerModeSampleRate(SDRPlayAPILibrary.HANDLE dev, DoubleByReference currentSampleRate);
	/**
	 * Original signature : <code>sdrplay_api_ErrT sdrplay_api_SwapRspDuoDualTunerModeSampleRate(HANDLE, double*)</code><br>
	 * <i>native declaration : line 218</i>
	 */
	int sdrplay_api_SwapRspDuoDualTunerModeSampleRate(SDRPlayAPILibrary.HANDLE dev, DoubleBuffer currentSampleRate);
	/**
	 * Original signature : <code>sdrplay_api_ErrT sdrplay_api_SwapRspDuoMode(sdrplay_api_DeviceT*, sdrplay_api_DeviceParamsT**, sdrplay_api_RspDuoModeT, double, sdrplay_api_TunerSelectT, sdrplay_api_Bw_MHzT, sdrplay_api_If_kHzT, sdrplay_api_RspDuo_AmPortSelectT)</code><br>
	 * <i>native declaration : line 219</i><br>
	 * @deprecated use the safer method {@link #sdrplay_api_SwapRspDuoMode(sdrplayapi.sdrplay_api_DeviceT, sdrplayapi.sdrplay_api_DeviceParamsT.ByReference[], sdrplayapi.SDRPlayAPILibrary.sdrplay_api_RspDuoModeT, double, sdrplayapi.SDRPlayAPILibrary.sdrplay_api_TunerSelectT, sdrplayapi.SDRPlayAPILibrary.sdrplay_api_Bw_MHzT, sdrplayapi.SDRPlayAPILibrary.sdrplay_api_If_kHzT, sdrplayapi.SDRPlayAPILibrary.sdrplay_api_RspDuo_AmPortSelectT)} instead
	 */
	@Deprecated 
	int sdrplay_api_SwapRspDuoMode(sdrplay_api_DeviceT currDevice, PointerByReference deviceParams, SDRPlayAPILibrary.sdrplay_api_RspDuoModeT rspDuoMode, double sampleRate, SDRPlayAPILibrary.sdrplay_api_TunerSelectT tuner, SDRPlayAPILibrary.sdrplay_api_Bw_MHzT bwType, SDRPlayAPILibrary.sdrplay_api_If_kHzT ifType, SDRPlayAPILibrary.sdrplay_api_RspDuo_AmPortSelectT tuner1AmPortSel);
	/**
	 * Original signature : <code>sdrplay_api_ErrT sdrplay_api_SwapRspDuoMode(sdrplay_api_DeviceT*, sdrplay_api_DeviceParamsT**, sdrplay_api_RspDuoModeT, double, sdrplay_api_TunerSelectT, sdrplay_api_Bw_MHzT, sdrplay_api_If_kHzT, sdrplay_api_RspDuo_AmPortSelectT)</code><br>
	 * <i>native declaration : line 219</i>
	 */
	int sdrplay_api_SwapRspDuoMode(sdrplay_api_DeviceT currDevice, ByReference deviceParams[], SDRPlayAPILibrary.sdrplay_api_RspDuoModeT rspDuoMode, double sampleRate, SDRPlayAPILibrary.sdrplay_api_TunerSelectT tuner, SDRPlayAPILibrary.sdrplay_api_Bw_MHzT bwType, SDRPlayAPILibrary.sdrplay_api_If_kHzT ifType, SDRPlayAPILibrary.sdrplay_api_RspDuo_AmPortSelectT tuner1AmPortSel);
	public static class sdrplay_api_TunerSelectT extends PointerType {
		public sdrplay_api_TunerSelectT(Pointer address) {
			super(address);
		}
		public sdrplay_api_TunerSelectT() {
			super();
		}
	};
	public static class sdrplay_api_CallbackFnsT extends PointerType {
		public sdrplay_api_CallbackFnsT(Pointer address) {
			super(address);
		}
		public sdrplay_api_CallbackFnsT() {
			super();
		}
	};
	public static class sdrplay_api_RspDuo_AmPortSelectT extends PointerType {
		public sdrplay_api_RspDuo_AmPortSelectT(Pointer address) {
			super(address);
		}
		public sdrplay_api_RspDuo_AmPortSelectT() {
			super();
		}
	};
	public static class sdrplay_api_Bw_MHzT extends PointerType {
		public sdrplay_api_Bw_MHzT(Pointer address) {
			super(address);
		}
		public sdrplay_api_Bw_MHzT() {
			super();
		}
	};
	public static class sdrplay_api_If_kHzT extends PointerType {
		public sdrplay_api_If_kHzT(Pointer address) {
			super(address);
		}
		public sdrplay_api_If_kHzT() {
			super();
		}
	};
	public static class sdrplay_api_RxChannelParamsT extends PointerType {
		public sdrplay_api_RxChannelParamsT(Pointer address) {
			super(address);
		}
		public sdrplay_api_RxChannelParamsT() {
			super();
		}
	};
	public static class HANDLE extends PointerType {
		public HANDLE(Pointer address) {
			super(address);
		}
		public HANDLE() {
			super();
		}
	};
	public static class sdrplay_api_DevParamsT extends PointerType {
		public sdrplay_api_DevParamsT(Pointer address) {
			super(address);
		}
		public sdrplay_api_DevParamsT() {
			super();
		}
	};
	public static class sdrplay_api_RspDuoModeT extends PointerType {
		public sdrplay_api_RspDuoModeT(Pointer address) {
			super(address);
		}
		public sdrplay_api_RspDuoModeT() {
			super();
		}
	};
}
