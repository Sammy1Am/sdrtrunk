package io.github.dsheirer.source.tuner.sdrplay.api;

import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
import io.github.dsheirer.source.tuner.sdrplay.api.SDRPlayAPILibrary.HANDLE;
import io.github.dsheirer.source.tuner.sdrplay.api.SDRPlayAPILibrary.sdrplay_api_RspDuoModeT;
import io.github.dsheirer.source.tuner.sdrplay.api.SDRPlayAPILibrary.sdrplay_api_TunerSelectT;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class sdrplay_api_DeviceT extends Structure {
	/** C type : char[(64)] */
	public byte[] SerNo = new byte[64];
	public byte hwVer;
	/** C type : sdrplay_api_TunerSelectT */
	public sdrplay_api_TunerSelectT tuner;
	/** C type : sdrplay_api_RspDuoModeT */
	public sdrplay_api_RspDuoModeT rspDuoMode;
	public double rspDuoSampleFreq;
	/** C type : HANDLE */
	public HANDLE dev;
	public sdrplay_api_DeviceT() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("SerNo", "hwVer", "tuner", "rspDuoMode", "rspDuoSampleFreq", "dev");
	}
	/**
	 * @param SerNo C type : char[(64)]<br>
	 * @param tuner C type : sdrplay_api_TunerSelectT<br>
	 * @param rspDuoMode C type : sdrplay_api_RspDuoModeT<br>
	 * @param dev C type : HANDLE
	 */
	public sdrplay_api_DeviceT(byte SerNo[], byte hwVer, sdrplay_api_TunerSelectT tuner, sdrplay_api_RspDuoModeT rspDuoMode, double rspDuoSampleFreq, HANDLE dev) {
		super();
		if ((SerNo.length != this.SerNo.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.SerNo = SerNo;
		this.hwVer = hwVer;
		this.tuner = tuner;
		this.rspDuoMode = rspDuoMode;
		this.rspDuoSampleFreq = rspDuoSampleFreq;
		this.dev = dev;
	}
	public static class ByReference extends sdrplay_api_DeviceT implements Structure.ByReference {
		
	};
	public static class ByValue extends sdrplay_api_DeviceT implements Structure.ByValue {
		
	};
}
